//
//  CoinsListInteractor.swift
//  MarketCoin
//
//  Created by Gilvan Wemerson on 23/05/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CoinsListBusinessLogic{
    func doFetchGlobalValues(request: CoinsList.FetchGlobalValues.Request)
    func doFetchListCoins(request: CoinsList.FetchListCoins.Request)
}

protocol CoinsListDataStore{
    //var name: String { get set }
}

class CoinsListInteractor: CoinsListBusinessLogic, CoinsListDataStore{
    var presenter: CoinsListPresentationLogic?
    var globalValuesWorker: GlobalValuesWorker?
    var coinListWorker: CoinsListWorker?

    init(presenter: CoinsListPresentationLogic = CoinsListPresenter(),
         globalValuesWorker: GlobalValuesWorker = GlobalValuesWorker(),
         coinListWorker: CoinsListWorker = CoinsListWorker()) {
        
        self.presenter = presenter
        self.globalValuesWorker = globalValuesWorker
        self.coinListWorker = coinListWorker
    }
    
    
    func doFetchGlobalValues(request: CoinsList.FetchGlobalValues.Request) {
        globalValuesWorker?.doFetchGlobalValues(completion: { result in
            switch result {
            case .success(let globalModel):
                self.createGlobalValuesResponse(baseCoin: request.baseCoin, global: globalModel)
            case .failure(let error):
                self.presenter?.presetError(error: error)
                
            }
        })
    }
    
    func doFetchListCoins(request: CoinsList.FetchListCoins.Request) {
        let baseCoin = request.baseCoin
        let ordeby = request.orderBy
        let top = request.top
        let percentagePrice = request.pricePercentage
        coinListWorker?.doFetchListCoins(baseCoin: baseCoin,
                                         orderBy: ordeby,
                                         top: top,
                                         percentagePrice: percentagePrice,
                                         completion: { result in
            switch result {
            case .success(let listCoinsModel):
                self.createListCoinsResponse(request: request, listCoins: listCoinsModel)
            case .failure(let error):
                self.presenter?.presetError(error: error)
                
            }
        })
    }
    
    private func createGlobalValuesResponse(baseCoin: String, global: GlobalModel?){
        if let global {
            let totalMarketCap = global.data.totalMarketCap.filter { $0.key == baseCoin }
            let totalVolume = global.data.totalVolume.filter { $0.key == baseCoin }
            let response = CoinsList.FetchGlobalValues.Response(baseCoin: baseCoin,
                                                                totalMarkeCap: totalMarketCap,
                                                                totalVolume: totalVolume)
            
            presenter?.presentGlobalValeus(response: response)

        }else{
            self.presenter?.presetError(error: .undefinedError)
        }
    }
    
    private func createListCoinsResponse(request: CoinsList.FetchListCoins.Request, listCoins: [CoinModel]?){

            func priceChangePercentage(pricePercentage: String, coin: CoinModel) -> Double {
                if let listCoins {
                    switch pricePercentage {
                    case "1h":
                        return coin.priceChangePercentage1H ?? 0.0
                    case "24":
                        return coin.priceChangePercentage24H ?? 0.0
                    case "7d":
                        return coin.priceChangePercentage7D ?? 0.0
                    case "14d":
                        return coin.priceChangePercentage14D ?? 0.0
                    case "30d":
                        return coin.priceChangePercentage30D ?? 0.0
                    case "200d":
                        return coin.priceChangePercentage200D ?? 0.0
                    case "1y":
                        return coin.priceChangePercentage1Y ?? 0.0
                    default:
                        return coin.priceChangePercentage1H ?? 0.0
                    }
                    
                    let response = listCoins.map { coin in
                        return CoinsList.FetchListCoins.Response(baseCoin: request.baseCoin,
                                                                 id: coin.id,
                                                                 symbol: coin.symbol,
                                                                 name: coin.name,
                                                                 image: coin.image,
                                                                 currentPrice: coin.currentPrice ?? 0.0,
                                                                 marketCap: coin.marketCap ?? 0.0,
                                                                 marketCapRank: coin.marketCapRank,
                                                                 priceChangePercentage: priceChangePercentage(pricePercentage: request.pricePercentage, coin: coin))
                    
                    }
                    presenter?.presentListCoins(response: response)
                }else{
                    self.presenter?.presetError(error: .undefinedError)
                }
                return 0.0
            }
        }
    
    
    }
    

